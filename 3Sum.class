//Leet Code 3 sum problem:
// Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
List<List<Integer>> ans=new ArrayList<>();
      
      Arrays.sort(nums);

for(int i=0;i<nums.length;i++){

int t=-nums[i];
int a= nums[i];
int s=i+1,e=nums.length-1;
while(s<e){

if(nums[s]+nums[e]==t){
  List<Integer> ans1=new ArrayList();
                    ans1.add(a);
                    ans1.add(nums[s]);
                    ans1.add(nums[e]);

    ans.add(ans1);

while(s<e && nums[s]==nums[s+1])s++;
while(s<e && nums[e]==nums[e-1])e--;
    s++;e--;
}else if(nums[s]+nums[e]>t){
    e--;
}else {
    s++;
}

}
while(i+1<nums.length && nums[i]==nums[i+1])i++;

}
return ans;
        
    }
}
